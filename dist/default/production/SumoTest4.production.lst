

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Jan 26 11:43:33 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 1.44
    16                           ; Generated 14/09/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F886 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0089                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  008F                     	;# 
    92  0090                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0097                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009A                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  0105                     	;# 
   111  0107                     	;# 
   112  0108                     	;# 
   113  0109                     	;# 
   114  010C                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  0185                     	;# 
   120  0187                     	;# 
   121  0188                     	;# 
   122  0189                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  000E                     	;# 
   140  000F                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  001D                     	;# 
   157  001E                     	;# 
   158  001F                     	;# 
   159  0081                     	;# 
   160  0085                     	;# 
   161  0086                     	;# 
   162  0087                     	;# 
   163  0089                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  008F                     	;# 
   168  0090                     	;# 
   169  0091                     	;# 
   170  0092                     	;# 
   171  0093                     	;# 
   172  0093                     	;# 
   173  0093                     	;# 
   174  0094                     	;# 
   175  0095                     	;# 
   176  0096                     	;# 
   177  0097                     	;# 
   178  0098                     	;# 
   179  0099                     	;# 
   180  009A                     	;# 
   181  009B                     	;# 
   182  009C                     	;# 
   183  009D                     	;# 
   184  009E                     	;# 
   185  009F                     	;# 
   186  0105                     	;# 
   187  0107                     	;# 
   188  0108                     	;# 
   189  0109                     	;# 
   190  010C                     	;# 
   191  010C                     	;# 
   192  010D                     	;# 
   193  010E                     	;# 
   194  010F                     	;# 
   195  0185                     	;# 
   196  0187                     	;# 
   197  0188                     	;# 
   198  0189                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201  0000                     	;# 
   202  0001                     	;# 
   203  0002                     	;# 
   204  0003                     	;# 
   205  0004                     	;# 
   206  0005                     	;# 
   207  0006                     	;# 
   208  0007                     	;# 
   209  0009                     	;# 
   210  000A                     	;# 
   211  000B                     	;# 
   212  000C                     	;# 
   213  000D                     	;# 
   214  000E                     	;# 
   215  000E                     	;# 
   216  000F                     	;# 
   217  0010                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0013                     	;# 
   221  0014                     	;# 
   222  0015                     	;# 
   223  0015                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001B                     	;# 
   231  001C                     	;# 
   232  001D                     	;# 
   233  001E                     	;# 
   234  001F                     	;# 
   235  0081                     	;# 
   236  0085                     	;# 
   237  0086                     	;# 
   238  0087                     	;# 
   239  0089                     	;# 
   240  008C                     	;# 
   241  008D                     	;# 
   242  008E                     	;# 
   243  008F                     	;# 
   244  0090                     	;# 
   245  0091                     	;# 
   246  0092                     	;# 
   247  0093                     	;# 
   248  0093                     	;# 
   249  0093                     	;# 
   250  0094                     	;# 
   251  0095                     	;# 
   252  0096                     	;# 
   253  0097                     	;# 
   254  0098                     	;# 
   255  0099                     	;# 
   256  009A                     	;# 
   257  009B                     	;# 
   258  009C                     	;# 
   259  009D                     	;# 
   260  009E                     	;# 
   261  009F                     	;# 
   262  0105                     	;# 
   263  0107                     	;# 
   264  0108                     	;# 
   265  0109                     	;# 
   266  010C                     	;# 
   267  010C                     	;# 
   268  010D                     	;# 
   269  010E                     	;# 
   270  010F                     	;# 
   271  0185                     	;# 
   272  0187                     	;# 
   273  0188                     	;# 
   274  0189                     	;# 
   275  018C                     	;# 
   276  018D                     	;# 
   277                           
   278                           	psect	strings
   279  0003                     __pstrings:	
   280  0003                     stringtab:	
   281  0003                     __stringtab:	
   282  0003                     stringcode:	
   283                           ;	String table - string pointers are 1 byte each
   284                           
   285  0003                     stringdir:	
   286  0003  3000               	movlw	high stringdir
   287  0004  008A               	movwf	10
   288  0005  0804               	movf	4,w
   289  0006  0A84               	incf	4,f
   290  0007  0782               	addwf	2,f
   291  0008                     __stringbase:	
   292  0008  3400               	retlw	0
   293  0009                     __end_of__stringtab:	
   294  0009                     _stop:	
   295  0009  3400               	retlw	0
   296  000A                     __end_of_stop:	
   297  000A                     _right:	
   298  000A  3402               	retlw	2
   299  000B                     __end_of_right:	
   300  000B                     _left:	
   301  000B  3408               	retlw	8
   302  000C                     __end_of_left:	
   303  000C                     _rev:	
   304  000C  3405               	retlw	5
   305  000D                     __end_of_rev:	
   306  000D                     _fwd:	
   307  000D  340A               	retlw	10
   308  000E                     __end_of_fwd:	
   309  0007                     _PORTC	set	7
   310  0005                     _PORTA	set	5
   311  0006                     _PORTB	set	6
   312  003E                     _RC6	set	62
   313  002F                     _RA7	set	47
   314  0029                     _RA1	set	41
   315  0028                     _RA0	set	40
   316  0039                     _RC1	set	57
   317  0038                     _RC0	set	56
   318  002C                     _RA4	set	44
   319  0034                     _RB4	set	52
   320  0087                     _TRISC	set	135
   321  0086                     _TRISB	set	134
   322  0085                     _TRISA	set	133
   323  0081                     _OPTION_REG	set	129
   324  0189                     _ANSELH	set	393
   325  0188                     _ANSEL	set	392
   326                           
   327                           ; #config settings
   328  0000                     
   329                           	psect	cinit
   330  07F7                     start_initialization:	
   331  07F7                     __initialization:	
   332                           
   333                           ; Clear objects allocated to COMMON
   334  07F7  01F7               	clrf	__pbssCOMMON& (0+127)
   335  07F8  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   336  07F9  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   337  07FA  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   338  07FB  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
   339  07FC                     end_of_initialization:	
   340                           ;End of C runtime variable initialization code
   341                           
   342  07FC                     __end_of__initialization:	
   343  07FC  0183               	clrf	3
   344  07FD  120A  118A  2F12   	ljmp	_main	;jump to C main() function
   345                           
   346                           	psect	bssCOMMON
   347  0077                     __pbssCOMMON:	
   348  0077                     _backLine:	
   349  0077                     	ds	1
   350  0078                     _frontLine:	
   351  0078                     	ds	1
   352  0079                     _target:	
   353  0079                     	ds	1
   354  007A                     _range:	
   355  007A                     	ds	1
   356  007B                     _mode:	
   357  007B                     	ds	1
   358                           
   359                           	psect	cstackCOMMON
   360  0070                     __pcstackCOMMON:	
   361  0070                     ?_initPorts:	
   362  0070                     ??_initPorts:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_wait:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ??_wait:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_sonarSensor:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ??_sonarSensor:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_detectLine:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ??_detectLine:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ?_main:	
   384                           ; 1 bytes @ 0x0
   385                           
   386                           
   387                           ; 2 bytes @ 0x0
   388  0070                     	ds	3
   389  0073                     wait@i:	
   390                           
   391                           ; 1 bytes @ 0x3
   392  0073                     	ds	1
   393  0074                     ??_main:	
   394                           
   395                           ; 1 bytes @ 0x4
   396  0074                     	ds	3
   397                           
   398                           	psect	maintext
   399  0712                     __pmaintext:	
   400 ;;
   401 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   402 ;;
   403 ;; *************** function _main *****************
   404 ;; Defined at:
   405 ;;		line 97 in file "SumoStarter.c"
   406 ;; Parameters:    Size  Location     Type
   407 ;;		None
   408 ;; Auto vars:     Size  Location     Type
   409 ;;		None
   410 ;; Return value:  Size  Location     Type
   411 ;;                  2   69[None  ] int 
   412 ;; Registers used:
   413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   414 ;; Tracked objects:
   415 ;;		On entry : B00/0
   416 ;;		On exit  : 0/0
   417 ;;		Unchanged: 0/0
   418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   419 ;;      Params:         0       0       0       0       0
   420 ;;      Locals:         0       0       0       0       0
   421 ;;      Temps:          3       0       0       0       0
   422 ;;      Totals:         3       0       0       0       0
   423 ;;Total ram usage:        3 bytes
   424 ;; Hardware stack levels required when called:    1
   425 ;; This function calls:
   426 ;;		_detectLine
   427 ;;		_initPorts
   428 ;;		_sonarSensor
   429 ;;		_wait
   430 ;; This function is called by:
   431 ;;		Startup code after reset
   432 ;; This function uses a non-reentrant model
   433 ;;
   434                           
   435                           
   436                           ;psect for function _main
   437  0712                     _main:	
   438                           
   439                           ;SumoStarter.c: 100: initPorts();
   440                           
   441                           ;incstack = 0
   442                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   443  0712  120A  118A  26B9  120A  118A  	fcall	_initPorts
   444                           
   445                           ;SumoStarter.c: 102: RA7 = 1;
   446  0717  1283               	bcf	3,5	;RP0=0, select bank0
   447  0718  1303               	bcf	3,6	;RP1=0, select bank0
   448  0719  1785               	bsf	5,7	;volatile
   449                           
   450                           ;SumoStarter.c: 103: RC6 = 1;
   451  071A  1707               	bsf	7,6	;volatile
   452                           
   453                           ;SumoStarter.c: 104: wait();
   454  071B  120A  118A  26CD  120A  118A  	fcall	_wait
   455                           
   456                           ;SumoStarter.c: 105: mode = 0;
   457  0720  01FB               	clrf	_mode
   458  0721                     l742:	
   459                           ;SumoStarter.c: 108: {
   460                           ;SumoStarter.c: 109: while(mode == 0)
   461                           
   462                           ;SumoStarter.c: 107: while(1)
   463                           
   464  0721  087B               	movf	_mode,w
   465  0722  1D03               	btfss	3,2
   466  0723  2FF3               	goto	l770
   467                           
   468                           ;SumoStarter.c: 110: {
   469                           ;SumoStarter.c: 111: sonarSensor();
   470  0724  120A  118A  26EC  120A  118A  	fcall	_sonarSensor
   471                           
   472                           ;SumoStarter.c: 112: detectLine();
   473  0729  120A  118A  26AB  120A  118A  	fcall	_detectLine
   474                           
   475                           ;SumoStarter.c: 114: if(range == 0)
   476  072E  087A               	movf	_range,w
   477  072F  1D03               	btfss	3,2
   478  0730  2F48               	goto	l714
   479                           
   480                           ;SumoStarter.c: 115: {
   481                           ;SumoStarter.c: 116: PORTB = right;
   482  0731  3002               	movlw	low (_right-__stringbase)
   483  0732  0084               	movwf	4
   484  0733  120A  118A  2003  120A  118A  	fcall	stringdir
   485  0738  1283               	bcf	3,5	;RP0=0, select bank0
   486  0739  1303               	bcf	3,6	;RP1=0, select bank0
   487  073A  0086               	movwf	6	;volatile
   488                           
   489                           ;SumoStarter.c: 117: _delay((unsigned long)((200)*(4000000/4000.0)));
   490  073B  3002               	movlw	2
   491  073C  00F6               	movwf	??_main+2
   492  073D  3004               	movlw	4
   493  073E  00F5               	movwf	??_main+1
   494  073F  30BA               	movlw	186
   495  0740  00F4               	movwf	??_main
   496  0741                     u357:	
   497  0741  0BF4               	decfsz	??_main,f
   498  0742  2F41               	goto	u357
   499  0743  0BF5               	decfsz	??_main+1,f
   500  0744  2F41               	goto	u357
   501  0745  0BF6               	decfsz	??_main+2,f
   502  0746  2F41               	goto	u357
   503  0747  0000               	nop
   504  0748                     l714:	
   505                           
   506                           ;SumoStarter.c: 118: }
   507                           ;SumoStarter.c: 120: if(frontLine == 1)
   508  0748  0378               	decf	_frontLine,w
   509  0749  1D03               	btfss	3,2
   510  074A  2F7A               	goto	l724
   511                           
   512                           ;SumoStarter.c: 121: {
   513                           ;SumoStarter.c: 122: PORTB = rev;
   514  074B  3004               	movlw	low (_rev-__stringbase)
   515  074C  0084               	movwf	4
   516  074D  120A  118A  2003  120A  118A  	fcall	stringdir
   517  0752  1283               	bcf	3,5	;RP0=0, select bank0
   518  0753  1303               	bcf	3,6	;RP1=0, select bank0
   519  0754  0086               	movwf	6	;volatile
   520                           
   521                           ;SumoStarter.c: 123: _delay((unsigned long)((1000)*(4000000/4000.0)));
   522  0755  3006               	movlw	6
   523  0756  00F6               	movwf	??_main+2
   524  0757  3013               	movlw	19
   525  0758  00F5               	movwf	??_main+1
   526  0759  30AD               	movlw	173
   527  075A  00F4               	movwf	??_main
   528  075B                     u367:	
   529  075B  0BF4               	decfsz	??_main,f
   530  075C  2F5B               	goto	u367
   531  075D  0BF5               	decfsz	??_main+1,f
   532  075E  2F5B               	goto	u367
   533  075F  0BF6               	decfsz	??_main+2,f
   534  0760  2F5B               	goto	u367
   535  0761  2F62               	nop2
   536                           
   537                           ;SumoStarter.c: 124: PORTB = left;
   538  0762  3003               	movlw	low (_left-__stringbase)
   539  0763  0084               	movwf	4
   540  0764  120A  118A  2003  120A  118A  	fcall	stringdir
   541  0769  1283               	bcf	3,5	;RP0=0, select bank0
   542  076A  1303               	bcf	3,6	;RP1=0, select bank0
   543  076B  0086               	movwf	6	;volatile
   544                           
   545                           ;SumoStarter.c: 125: _delay((unsigned long)((500)*(4000000/4000.0)));
   546  076C  3003               	movlw	3
   547  076D  00F6               	movwf	??_main+2
   548  076E  308A               	movlw	138
   549  076F  00F5               	movwf	??_main+1
   550  0770  3055               	movlw	85
   551  0771  00F4               	movwf	??_main
   552  0772                     u377:	
   553  0772  0BF4               	decfsz	??_main,f
   554  0773  2F72               	goto	u377
   555  0774  0BF5               	decfsz	??_main+1,f
   556  0775  2F72               	goto	u377
   557  0776  0BF6               	decfsz	??_main+2,f
   558  0777  2F72               	goto	u377
   559  0778  2F79               	nop2
   560                           
   561                           ;SumoStarter.c: 126: frontLine = 0;
   562  0779  01F8               	clrf	_frontLine
   563  077A                     l724:	
   564                           
   565                           ;SumoStarter.c: 127: }
   566                           ;SumoStarter.c: 129: if(backLine == 1)
   567  077A  0377               	decf	_backLine,w
   568  077B  1D03               	btfss	3,2
   569  077C  2FAC               	goto	l734
   570                           
   571                           ;SumoStarter.c: 130: {
   572                           ;SumoStarter.c: 131: PORTB = fwd;
   573  077D  3005               	movlw	low (_fwd-__stringbase)
   574  077E  0084               	movwf	4
   575  077F  120A  118A  2003  120A  118A  	fcall	stringdir
   576  0784  1283               	bcf	3,5	;RP0=0, select bank0
   577  0785  1303               	bcf	3,6	;RP1=0, select bank0
   578  0786  0086               	movwf	6	;volatile
   579                           
   580                           ;SumoStarter.c: 132: _delay((unsigned long)((1000)*(4000000/4000.0)));
   581  0787  3006               	movlw	6
   582  0788  00F6               	movwf	??_main+2
   583  0789  3013               	movlw	19
   584  078A  00F5               	movwf	??_main+1
   585  078B  30AD               	movlw	173
   586  078C  00F4               	movwf	??_main
   587  078D                     u387:	
   588  078D  0BF4               	decfsz	??_main,f
   589  078E  2F8D               	goto	u387
   590  078F  0BF5               	decfsz	??_main+1,f
   591  0790  2F8D               	goto	u387
   592  0791  0BF6               	decfsz	??_main+2,f
   593  0792  2F8D               	goto	u387
   594  0793  2F94               	nop2
   595                           
   596                           ;SumoStarter.c: 133: PORTB = right;
   597  0794  3002               	movlw	low (_right-__stringbase)
   598  0795  0084               	movwf	4
   599  0796  120A  118A  2003  120A  118A  	fcall	stringdir
   600  079B  1283               	bcf	3,5	;RP0=0, select bank0
   601  079C  1303               	bcf	3,6	;RP1=0, select bank0
   602  079D  0086               	movwf	6	;volatile
   603                           
   604                           ;SumoStarter.c: 134: _delay((unsigned long)((500)*(4000000/4000.0)));
   605  079E  3003               	movlw	3
   606  079F  00F6               	movwf	??_main+2
   607  07A0  308A               	movlw	138
   608  07A1  00F5               	movwf	??_main+1
   609  07A2  3055               	movlw	85
   610  07A3  00F4               	movwf	??_main
   611  07A4                     u397:	
   612  07A4  0BF4               	decfsz	??_main,f
   613  07A5  2FA4               	goto	u397
   614  07A6  0BF5               	decfsz	??_main+1,f
   615  07A7  2FA4               	goto	u397
   616  07A8  0BF6               	decfsz	??_main+2,f
   617  07A9  2FA4               	goto	u397
   618  07AA  2FAB               	nop2
   619                           
   620                           ;SumoStarter.c: 135: backLine = 0;
   621  07AB  01F7               	clrf	_backLine
   622  07AC                     l734:	
   623                           
   624                           ;SumoStarter.c: 136: }
   625                           ;SumoStarter.c: 138: if(range >= 1 && range <= 75)
   626  07AC  087A               	movf	_range,w
   627  07AD  1903               	btfsc	3,2
   628  07AE  2FB5               	goto	l740
   629  07AF  304C               	movlw	76
   630  07B0  027A               	subwf	_range,w
   631  07B1  1803               	skipnc
   632  07B2  2FB5               	goto	l740
   633                           
   634                           ;SumoStarter.c: 139: {
   635                           ;SumoStarter.c: 140: mode = 1;
   636  07B3  01FB               	clrf	_mode
   637  07B4  0AFB               	incf	_mode,f
   638  07B5                     l740:	
   639                           
   640                           ;SumoStarter.c: 141: }
   641                           ;SumoStarter.c: 142: _delay((unsigned long)((5)*(4000000/4000.0)));
   642  07B5  3007               	movlw	7
   643  07B6  00F5               	movwf	??_main+1
   644  07B7  307D               	movlw	125
   645  07B8  00F4               	movwf	??_main
   646  07B9                     u407:	
   647  07B9  0BF4               	decfsz	??_main,f
   648  07BA  2FB9               	goto	u407
   649  07BB  0BF5               	decfsz	??_main+1,f
   650  07BC  2FB9               	goto	u407
   651  07BD  2F21               	goto	l742
   652  07BE                     l744:	
   653                           ;SumoStarter.c: 143: }
   654                           ;SumoStarter.c: 145: while(mode == 1)
   655                           
   656                           
   657                           ;SumoStarter.c: 146: {
   658                           ;SumoStarter.c: 147: sonarSensor();
   659  07BE  120A  118A  26EC  120A  118A  	fcall	_sonarSensor
   660                           
   661                           ;SumoStarter.c: 148: detectLine();
   662  07C3  120A  118A  26AB  120A  118A  	fcall	_detectLine
   663                           
   664                           ;SumoStarter.c: 150: if(range >= 1 && range <= 75)
   665  07C8  087A               	movf	_range,w
   666  07C9  1903               	btfsc	3,2
   667  07CA  2FE2               	goto	l756
   668  07CB  304C               	movlw	76
   669  07CC  027A               	subwf	_range,w
   670  07CD  1803               	skipnc
   671  07CE  2FE2               	goto	l756
   672                           
   673                           ;SumoStarter.c: 151: {
   674                           ;SumoStarter.c: 152: PORTB = fwd;
   675  07CF  3005               	movlw	low (_fwd-__stringbase)
   676  07D0  0084               	movwf	4
   677  07D1  120A  118A  2003  120A  118A  	fcall	stringdir
   678  07D6  1283               	bcf	3,5	;RP0=0, select bank0
   679  07D7  1303               	bcf	3,6	;RP1=0, select bank0
   680  07D8  0086               	movwf	6	;volatile
   681                           
   682                           ;SumoStarter.c: 153: _delay((unsigned long)((100)*(4000000/4000.0)));
   683  07D9  3082               	movlw	130
   684  07DA  00F5               	movwf	??_main+1
   685  07DB  30DD               	movlw	221
   686  07DC  00F4               	movwf	??_main
   687  07DD                     u417:	
   688  07DD  0BF4               	decfsz	??_main,f
   689  07DE  2FDD               	goto	u417
   690  07DF  0BF5               	decfsz	??_main+1,f
   691  07E0  2FDD               	goto	u417
   692  07E1  2FE2               	nop2
   693  07E2                     l756:	
   694                           
   695                           ;SumoStarter.c: 154: }
   696                           ;SumoStarter.c: 156: if(frontLine == 1)
   697  07E2  0378               	decf	_frontLine,w
   698  07E3  1903               	btfsc	3,2
   699                           
   700                           ;SumoStarter.c: 157: {
   701                           ;SumoStarter.c: 158: mode = 0;
   702  07E4  01FB               	clrf	_mode
   703                           
   704                           ;SumoStarter.c: 159: }
   705                           ;SumoStarter.c: 161: if(backLine == 1)
   706  07E5  0377               	decf	_backLine,w
   707  07E6  1903               	btfsc	3,2
   708                           
   709                           ;SumoStarter.c: 162: {
   710                           ;SumoStarter.c: 163: mode = 0;
   711  07E7  01FB               	clrf	_mode
   712                           
   713                           ;SumoStarter.c: 164: }
   714                           ;SumoStarter.c: 166: if(range == 0)
   715  07E8  087A               	movf	_range,w
   716  07E9  1903               	btfsc	3,2
   717                           
   718                           ;SumoStarter.c: 167: {
   719                           ;SumoStarter.c: 168: mode = 0;
   720  07EA  01FB               	clrf	_mode
   721                           
   722                           ;SumoStarter.c: 169: }
   723                           ;SumoStarter.c: 170: _delay((unsigned long)((5)*(4000000/4000.0)));
   724  07EB  3007               	movlw	7
   725  07EC  00F5               	movwf	??_main+1
   726  07ED  307D               	movlw	125
   727  07EE  00F4               	movwf	??_main
   728  07EF                     u427:	
   729  07EF  0BF4               	decfsz	??_main,f
   730  07F0  2FEF               	goto	u427
   731  07F1  0BF5               	decfsz	??_main+1,f
   732  07F2  2FEF               	goto	u427
   733  07F3                     l770:	
   734  07F3  037B               	decf	_mode,w
   735  07F4  1D03               	btfss	3,2
   736  07F5  2F21               	goto	l742
   737  07F6  2FBE               	goto	l744
   738  07F7                     __end_of_main:	
   739                           
   740                           	psect	text1
   741  06CD                     __ptext1:	
   742 ;; *************** function _wait *****************
   743 ;; Defined at:
   744 ;;		line 43 in file "SumoStarter.c"
   745 ;; Parameters:    Size  Location     Type
   746 ;;		None
   747 ;; Auto vars:     Size  Location     Type
   748 ;;  i               1    3[COMMON] unsigned char 
   749 ;; Return value:  Size  Location     Type
   750 ;;                  1    wreg      void 
   751 ;; Registers used:
   752 ;;		wreg, status,2, status,0
   753 ;; Tracked objects:
   754 ;;		On entry : 0/0
   755 ;;		On exit  : 0/0
   756 ;;		Unchanged: 0/0
   757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   758 ;;      Params:         0       0       0       0       0
   759 ;;      Locals:         1       0       0       0       0
   760 ;;      Temps:          3       0       0       0       0
   761 ;;      Totals:         4       0       0       0       0
   762 ;;Total ram usage:        4 bytes
   763 ;; Hardware stack levels used:    1
   764 ;; This function calls:
   765 ;;		Nothing
   766 ;; This function is called by:
   767 ;;		_main
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           
   772                           ;psect for function _wait
   773  06CD                     _wait:	
   774  06CD                     l45:	
   775                           ;SumoStarter.c: 45: while(RB4 == 1);
   776                           
   777                           ;incstack = 0
   778                           ; Regs used in _wait: [wreg+status,2+status,0]
   779                           
   780  06CD  1283               	bcf	3,5	;RP0=0, select bank0
   781  06CE  1303               	bcf	3,6	;RP1=0, select bank0
   782  06CF  1A06               	btfsc	6,4	;volatile
   783  06D0  2ECD               	goto	l45
   784                           
   785                           ;SumoStarter.c: 47: for(unsigned char i = 10; i != 0; i--)
   786  06D1  300A               	movlw	10
   787  06D2  00F0               	movwf	??_wait
   788  06D3  0870               	movf	??_wait,w
   789  06D4  00F3               	movwf	wait@i
   790  06D5                     L1:	
   791  06D5  0873               	movf	wait@i,w
   792  06D6  1903               	btfsc	3,2
   793  06D7  0008               	return
   794                           
   795                           ;SumoStarter.c: 48: {
   796                           ;SumoStarter.c: 49: _delay((unsigned long)((500)*(4000000/4000.0)));
   797  06D8  3003               	movlw	3
   798  06D9  00F2               	movwf	??_wait+2
   799  06DA  308A               	movlw	138
   800  06DB  00F1               	movwf	??_wait+1
   801  06DC  3055               	movlw	85
   802  06DD  00F0               	movwf	??_wait
   803  06DE                     u437:	
   804  06DE  0BF0               	decfsz	??_wait,f
   805  06DF  2EDE               	goto	u437
   806  06E0  0BF1               	decfsz	??_wait+1,f
   807  06E1  2EDE               	goto	u437
   808  06E2  0BF2               	decfsz	??_wait+2,f
   809  06E3  2EDE               	goto	u437
   810  06E4  2EE5               	nop2
   811                           
   812                           ;SumoStarter.c: 50: RA4 = !RA4;
   813  06E5  3010               	movlw	16
   814  06E6  1283               	bcf	3,5	;RP0=0, select bank0
   815  06E7  1303               	bcf	3,6	;RP1=0, select bank0
   816  06E8  0685               	xorwf	5,f
   817  06E9  3001               	movlw	1
   818  06EA  02F3               	subwf	wait@i,f
   819  06EB  2ED5               	goto	L1
   820  06EC                     __end_of_wait:	
   821                           
   822                           	psect	text2
   823  06EC                     __ptext2:	
   824 ;; *************** function _sonarSensor *****************
   825 ;; Defined at:
   826 ;;		line 58 in file "SumoStarter.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;		None
   829 ;; Auto vars:     Size  Location     Type
   830 ;;		None
   831 ;; Return value:  Size  Location     Type
   832 ;;                  1    wreg      void 
   833 ;; Registers used:
   834 ;;		wreg, status,2, status,0
   835 ;; Tracked objects:
   836 ;;		On entry : 0/0
   837 ;;		On exit  : 0/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   840 ;;      Params:         0       0       0       0       0
   841 ;;      Locals:         0       0       0       0       0
   842 ;;      Temps:          2       0       0       0       0
   843 ;;      Totals:         2       0       0       0       0
   844 ;;Total ram usage:        2 bytes
   845 ;; Hardware stack levels used:    1
   846 ;; This function calls:
   847 ;;		Nothing
   848 ;; This function is called by:
   849 ;;		_main
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853                           
   854                           ;psect for function _sonarSensor
   855  06EC                     _sonarSensor:	
   856                           
   857                           ;SumoStarter.c: 60: RC0 = 1;
   858                           
   859                           ;incstack = 0
   860                           ; Regs used in _sonarSensor: [wreg+status,2+status,0]
   861  06EC  1283               	bcf	3,5	;RP0=0, select bank0
   862  06ED  1303               	bcf	3,6	;RP1=0, select bank0
   863  06EE  1407               	bsf	7,0	;volatile
   864                           
   865                           ;SumoStarter.c: 61: _delay((unsigned long)((20)*(4000000/4000.0)));
   866  06EF  301A               	movlw	26
   867  06F0  00F1               	movwf	??_sonarSensor+1
   868  06F1  30F8               	movlw	248
   869  06F2  00F0               	movwf	??_sonarSensor
   870  06F3                     u447:	
   871  06F3  0BF0               	decfsz	??_sonarSensor,f
   872  06F4  2EF3               	goto	u447
   873  06F5  0BF1               	decfsz	??_sonarSensor+1,f
   874  06F6  2EF3               	goto	u447
   875  06F7  0000               	nop
   876                           
   877                           ;SumoStarter.c: 62: RC0 = 0;
   878  06F8  1283               	bcf	3,5	;RP0=0, select bank0
   879  06F9  1303               	bcf	3,6	;RP1=0, select bank0
   880  06FA  1007               	bcf	7,0	;volatile
   881                           
   882                           ;SumoStarter.c: 64: range = 0;
   883  06FB  01FA               	clrf	_range
   884  06FC                     l53:	
   885                           ;SumoStarter.c: 66: while(RC1 == 0);
   886                           
   887  06FC  1887               	btfsc	7,1	;volatile
   888  06FD  2F08               	goto	l594
   889  06FE  2EFC               	goto	l53
   890  06FF                     l590:	
   891                           ;SumoStarter.c: 68: while(RC1 == 1)
   892                           
   893                           
   894                           ;SumoStarter.c: 69: {
   895                           ;SumoStarter.c: 70: _delay((unsigned long)((50)*(4000000/4000000.0)));
   896  06FF  3010               	movlw	16
   897  0700  00F0               	movwf	??_sonarSensor
   898  0701                     u457:	
   899  0701  0BF0               	decfsz	??_sonarSensor,f
   900  0702  2F01               	goto	u457
   901  0703  0000               	nop
   902                           
   903                           ;SumoStarter.c: 71: range++;
   904  0704  3001               	movlw	1
   905  0705  00F0               	movwf	??_sonarSensor
   906  0706  0870               	movf	??_sonarSensor,w
   907  0707  07FA               	addwf	_range,f
   908  0708                     l594:	
   909  0708  1283               	bcf	3,5	;RP0=0, select bank0
   910  0709  1303               	bcf	3,6	;RP1=0, select bank0
   911  070A  1887               	btfsc	7,1	;volatile
   912  070B  2EFF               	goto	l590
   913                           
   914                           ;SumoStarter.c: 72: }
   915                           ;SumoStarter.c: 74: if(range > 75)
   916  070C  304C               	movlw	76
   917  070D  027A               	subwf	_range,w
   918  070E  1C03               	skipc
   919  070F  0008               	return
   920                           
   921                           ;SumoStarter.c: 75: {
   922                           ;SumoStarter.c: 76: range = 0;
   923  0710  01FA               	clrf	_range
   924  0711  0008               	return
   925  0712                     __end_of_sonarSensor:	
   926                           
   927                           	psect	text3
   928  06B9                     __ptext3:	
   929 ;; *************** function _initPorts *****************
   930 ;; Defined at:
   931 ;;		line 12 in file "CHRPmini.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;		None
   934 ;; Auto vars:     Size  Location     Type
   935 ;;		None
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      void 
   938 ;; Registers used:
   939 ;;		wreg, status,2
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   945 ;;      Params:         0       0       0       0       0
   946 ;;      Locals:         0       0       0       0       0
   947 ;;      Temps:          0       0       0       0       0
   948 ;;      Totals:         0       0       0       0       0
   949 ;;Total ram usage:        0 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; This function calls:
   952 ;;		Nothing
   953 ;; This function is called by:
   954 ;;		_main
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           
   959                           ;psect for function _initPorts
   960  06B9                     _initPorts:	
   961                           
   962                           ;CHRPmini.c: 18: ANSEL = 0b00000000;
   963                           
   964                           ;incstack = 0
   965                           ; Regs used in _initPorts: [wreg+status,2]
   966  06B9  1683               	bsf	3,5	;RP0=1, select bank3
   967  06BA  1703               	bsf	3,6	;RP1=1, select bank3
   968  06BB  0188               	clrf	8	;volatile
   969                           
   970                           ;CHRPmini.c: 19: ANSELH = 0b00000000;
   971  06BC  0189               	clrf	9	;volatile
   972                           
   973                           ;CHRPmini.c: 20: OPTION_REG = 0b01010001;
   974  06BD  3051               	movlw	81
   975  06BE  1683               	bsf	3,5	;RP0=1, select bank1
   976  06BF  1303               	bcf	3,6	;RP1=0, select bank1
   977  06C0  0081               	movwf	1	;volatile
   978                           
   979                           ;CHRPmini.c: 24: TRISA = 0b00101111;
   980  06C1  302F               	movlw	47
   981  06C2  0085               	movwf	5	;volatile
   982                           
   983                           ;CHRPmini.c: 26: TRISB = 0b11110000;
   984  06C3  30F0               	movlw	240
   985  06C4  0086               	movwf	6	;volatile
   986                           
   987                           ;CHRPmini.c: 27: TRISC = 0b10110010;
   988  06C5  30B2               	movlw	178
   989  06C6  0087               	movwf	7	;volatile
   990                           
   991                           ;CHRPmini.c: 33: PORTA = 0;
   992  06C7  1283               	bcf	3,5	;RP0=0, select bank0
   993  06C8  1303               	bcf	3,6	;RP1=0, select bank0
   994  06C9  0185               	clrf	5	;volatile
   995                           
   996                           ;CHRPmini.c: 34: PORTB = 0;
   997  06CA  0186               	clrf	6	;volatile
   998                           
   999                           ;CHRPmini.c: 35: PORTC = 0;
  1000  06CB  0187               	clrf	7	;volatile
  1001  06CC  0008               	return
  1002  06CD                     __end_of_initPorts:	
  1003                           
  1004                           	psect	text4
  1005  06AB                     __ptext4:	
  1006 ;; *************** function _detectLine *****************
  1007 ;; Defined at:
  1008 ;;		line 81 in file "SumoStarter.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;		None
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;		None
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  1    wreg      void 
  1015 ;; Registers used:
  1016 ;;		None
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1022 ;;      Params:         0       0       0       0       0
  1023 ;;      Locals:         0       0       0       0       0
  1024 ;;      Temps:          0       0       0       0       0
  1025 ;;      Totals:         0       0       0       0       0
  1026 ;;Total ram usage:        0 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; This function calls:
  1029 ;;		Nothing
  1030 ;; This function is called by:
  1031 ;;		_main
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           
  1036                           ;psect for function _detectLine
  1037  06AB                     _detectLine:	
  1038                           
  1039                           ;SumoStarter.c: 83: if(RA0 == 0 && RA1 == 1)
  1040                           
  1041                           ;incstack = 0
  1042                           ; Regs used in _detectLine: []
  1043  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  1044  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  1045  06AD  1C05               	btfss	5,0	;volatile
  1046  06AE  1C85               	btfss	5,1	;volatile
  1047  06AF  2EB2               	goto	l63
  1048                           
  1049                           ;SumoStarter.c: 84: {
  1050                           ;SumoStarter.c: 85: frontLine = 1;
  1051  06B0  01F8               	clrf	_frontLine
  1052  06B1  0AF8               	incf	_frontLine,f
  1053  06B2                     l63:	
  1054                           
  1055                           ;SumoStarter.c: 86: }
  1056                           ;SumoStarter.c: 88: if(RA0 == 1 && RA1 == 0)
  1057  06B2  1C05               	btfss	5,0	;volatile
  1058  06B3  0008               	return
  1059  06B4  1885               	btfsc	5,1	;volatile
  1060  06B5  0008               	return
  1061                           
  1062                           ;SumoStarter.c: 89: {
  1063                           ;SumoStarter.c: 90: backLine = 1;
  1064  06B6  01F7               	clrf	_backLine
  1065  06B7  0AF7               	incf	_backLine,f
  1066  06B8  0008               	return
  1067  06B9                     __end_of_detectLine:	
  1068  007E                     btemp	set	126	;btemp
  1069  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    5
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      12
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_wait

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0      30
                                              4 COMMON     3     3      0
                         _detectLine
                          _initPorts
                        _sonarSensor
                               _wait
 ---------------------------------------------------------------------------------
 (1) _wait                                                 4     4      0      30
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _sonarSensor                                          2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _detectLine                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _detectLine
   _initPorts
   _sonarSensor
   _wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       C      12        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Jan 26 11:43:33 2018

                       pc 0002               __CFG_CP$OFF 0000                        l53 06FC  
                      l45 06CD                        l63 06B2                        fsr 0004  
                     l714 0748                       l740 07B5                       l724 077A  
                     l590 06FF                       l734 07AC                       l742 0721  
                     l744 07BE                       l594 0708                       l770 07F3  
                     l756 07E2                       _RA0 0028                       _RA1 0029  
                     _RA4 002C                       _RC0 0038                       _RC1 0039  
                     _RB4 0034                       _RA7 002F                       _RC6 003E  
                     u407 07B9                       u417 07DD              __CFG_CPD$OFF 0000  
                     u427 07EF                       u437 06DE                       u357 0741  
                     u447 06F3                       u367 075B                       u457 0701  
                     u377 0772                       u387 078D                       u397 07A4  
                     _fwd 000D                       _rev 000C                       fsr0 0004  
            __CFG_LVP$OFF 0000              __CFG_WRT$OFF 0000                      _main 0712  
                    _left 000B                      _mode 007B                      _wait 06CD  
                    btemp 007E                      _stop 0009                      start 0000  
           __CFG_IESO$OFF 0000             __CFG_MCLRE$ON 0000                     ?_main 0070  
           __CFG_WDTE$OFF 0000                     ?_wait 0070                     _ANSEL 0188  
                   _PORTA 0005                     _PORTB 0006                     _PORTC 0007  
                   _TRISA 0085                     _TRISB 0086                     _TRISC 0087  
           __CFG_PWRTE$ON 0000            __CFG_FCMEN$OFF 0000                     _range 007A  
                   _right 000A            __CFG_BOREN$OFF 0000                     pclath 000A  
                   wait@i 0073                     status 0003                     wtemp0 007E  
         __initialization 07F7              __end_of_main 07F7              __end_of_left 000C  
            __end_of_wait 06EC              __end_of_stop 000A                    ??_main 0074  
                  ??_wait 0070                    _ANSELH 0189                    _target 0079  
 __end_of__initialization 07FC              ?_sonarSensor 0070            __pcstackCOMMON 0070  
           __end_of_right 000B        __size_of_initPorts 0014                __pmaintext 0712  
              _detectLine 06AB                __stringtab 0003                   __ptext1 06CD  
                 __ptext2 06EC                   __ptext3 06B9                   __ptext4 06AB  
       __end_of_initPorts 06CD      end_of_initialization 07FC      __size_of_sonarSensor 0026  
             ?_detectLine 0070       start_initialization 07F7               __end_of_fwd 000E  
             __end_of_rev 000D       __size_of_detectLine 000E  __CFG_FOSC$INTRC_NOCLKOUT 0000  
             __pbssCOMMON 0077                 ___latbits 0002                 __pstrings 0003  
               _initPorts 06B9                 _frontLine 0078              ??_detectLine 0070  
             __stringbase 0008                ?_initPorts 0070        __end_of_detectLine 06B9  
           ??_sonarSensor 0070                  _backLine 0077        __end_of__stringtab 0009  
       __CFG_BOR4V$BOR40V 0000             __size_of_main 00E5             __size_of_wait 001F  
     __end_of_sonarSensor 0712               ??_initPorts 0070                 stringcode 0003  
              _OPTION_REG 0081                  stringdir 0003                  stringtab 0003  
             _sonarSensor 06EC  
